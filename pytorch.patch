diff --git a/c10/core/StorageImpl.h b/c10/core/StorageImpl.h
index ff29b68dc4..cfae0dc783 100644
--- a/c10/core/StorageImpl.h
+++ b/c10/core/StorageImpl.h
@@ -42,9 +42,9 @@ struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
       bool resizable)
       : data_ptr_(std::move(data_ptr)),
         size_bytes_(size_bytes),
+        allocator_(allocator),
         resizable_(resizable),
-        received_cuda_(false),
-        allocator_(allocator) {
+        received_cuda_(false) {
     if (resizable) {
       TORCH_INTERNAL_ASSERT(
           allocator_, "For resizable storage, allocator must be provided");
@@ -182,6 +182,7 @@ struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
     size_bytes_ = size_bytes;
     allocator_ = nullptr;
     resizable_ = false;
+    reserved_ = false;
   }

   // This method can be used only after storage construction and cannot be used
@@ -194,13 +195,18 @@ struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
     return received_cuda_;
   }

+  bool & reserved() {
+    return reserved_;
+  }
+
  private:
   DataPtr data_ptr_;
   size_t size_bytes_;
+  Allocator* allocator_;
   bool resizable_;
   // Identifies that Storage was received from another process and doesn't have
   // local to process cuda memory allocation
   bool received_cuda_;
-  Allocator* allocator_;
+  bool reserved_;
 };
 } // namespace c10
