diff --git a/c10/core/Scalar.h b/c10/core/Scalar.h
index dc69764b15..aeb12164fa 100644
--- a/c10/core/Scalar.h
+++ b/c10/core/Scalar.h
@@ -149,6 +149,16 @@ class C10_API Scalar {
     }
   }

+  bool operator==(const Scalar &rhs) const {
+    if (tag != rhs.tag)
+      return false;
+    switch (tag) {
+    case Tag::HAS_d: return v.d == rhs.v.d;
+    case Tag::HAS_z: return v.z == rhs.v.z;
+    default:         return v.i == rhs.v.i;
+    }
+  }
+
  private:
   template <
       typename T,
diff --git a/c10/core/StorageImpl.h b/c10/core/StorageImpl.h
index ff29b68dc4..cfae0dc783 100644
--- a/c10/core/StorageImpl.h
+++ b/c10/core/StorageImpl.h
@@ -42,9 +42,9 @@ struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
       bool resizable)
       : data_ptr_(std::move(data_ptr)),
         size_bytes_(size_bytes),
+        allocator_(allocator),
         resizable_(resizable),
-        received_cuda_(false),
-        allocator_(allocator) {
+        received_cuda_(false) {
     if (resizable) {
       TORCH_INTERNAL_ASSERT(
           allocator_, "For resizable storage, allocator must be provided");
@@ -182,6 +182,7 @@ struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
     size_bytes_ = size_bytes;
     allocator_ = nullptr;
     resizable_ = false;
+    reserved_ = false;
   }
 
   // This method can be used only after storage construction and cannot be used
@@ -194,13 +195,18 @@ struct C10_API StorageImpl final : public c10::intrusive_ptr_target {
     return received_cuda_;
   }
 
+  bool & reserved() {
+    return reserved_;
+  }
+
  private:
   DataPtr data_ptr_;
   size_t size_bytes_;
+  Allocator* allocator_;
   bool resizable_;
   // Identifies that Storage was received from another process and doesn't have
   // local to process cuda memory allocation
   bool received_cuda_;
-  Allocator* allocator_;
+  bool reserved_;
 };
 } // namespace c10
diff --git a/c10/core/TensorImpl.cpp b/c10/core/TensorImpl.cpp
index de829c4937..d859fe1613 100644
--- a/c10/core/TensorImpl.cpp
+++ b/c10/core/TensorImpl.cpp
@@ -555,9 +555,12 @@ void TensorImpl::copy_tensor_metadata_except_version_counter(
     const TensorImpl* src_impl,
     TensorImpl* dest_impl,
     bool allow_tensor_metadata_change) {
-  dest_impl->storage_ = src_impl->storage_;
-  dest_impl->sizes_and_strides_ = src_impl->sizes_and_strides_;
-  dest_impl->storage_offset_ = src_impl->storage_offset_;
+  dest_impl->storage_ = src_impl->storage();
+  dest_impl->sizes_and_strides_.set_sizes(src_impl->sizes());
+  auto strides = src_impl->strides();
+  memcpy(dest_impl->sizes_and_strides_.strides_data(), strides.begin(),
+         sizeof(int64_t) * strides.size());
+  dest_impl->storage_offset_ = src_impl->storage_offset();
   dest_impl->data_type_ = src_impl->data_type_;
   dest_impl->device_opt_ = src_impl->device_opt_;
   dest_impl->key_set_ = src_impl->key_set_.remove(DispatchKey::Python);
